@page "/BaseServicesTaskStatus"
@inherits Ace.AceGUI.Pages.BaseServicesCodeBehind
<h1>AceCommander Base Services Task Status</h1>


@if (@IsInitialized == false)
{<p>IsInitialized is STILL false</p>}
else
{
<hr />
<h2>LongRunningTasks on the Agent</h2>
<!--
<p>
    @{foreach (var taskId in @LongRunningTasksCOD.Keys)
        {@taskId.ToString() } }
</p>
-->
 <!-- Send a request for an update on all the tasks -->
<button type="button" class="btn btn-default" id="GetLongRunningTasksStatus" @onclick="(async () => await GetLongRunningTasksStatus())">@labelForGetLongRunningTasksStatusButton</button>
<button type="button" class="btn btn-default" id="GetLongRunningTasksStatusByList" @onclick="(async () => await GetLongRunningTasksStatusByList())">@labelForGetLongRunningTasksStatusByListButton</button>

<!-- Send a request for an update on a specific Id<LongRunningTaskInfo> tasks
<button type="button" class="btn btn-default" id="GetLongRunningTasksStatus" @onclick="(async () => await GetLongRunningTasksStatus(LongRunningTasksCOD.Keys.Select()))">specific task number (hardcoded for 1st in list)</button>

-->
<!--
<hr />
<p> Long running Tasks </p>
<p> count: @LongRunningTasksCOD.Keys.Count </p>
@foreach (var kv in LongRunningTasksCOD)
{
    <p> LRTId: Status:@kv.Value.TaskStatus.ToString() </p>
}
-->
<p>test:@testint</p>
}